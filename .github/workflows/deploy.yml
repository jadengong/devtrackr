name: Deploy DevTrackr

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Set up test environment
        run: |
          echo "Setting up test environment..."
          # Clean up any existing test databases
          rm -f test_deploy.db test_prod.db
          # Use in-memory database for testing (matches conftest.py)
          echo "TEST_DATABASE_URL=sqlite:///:memory:" > .env.test
          echo "Current directory: $(pwd)"
          echo "Files in current directory: $(ls -la)"
          echo "Test database URL: $(cat .env.test)"
          
      - name: Run tests before deployment
        run: |
          export TEST_DATABASE_URL=sqlite:///:memory:
          echo "Running tests with database URL: $TEST_DATABASE_URL"
          echo "Python version: $(python --version)"
          echo "Installed packages: $(pip list | grep -E '(pytest|sqlalchemy|fastapi)')"
          python -m pytest tests/ --cov=. --cov-report=term-missing --tb=short -v
          
      - name: Build Docker image
        run: |
          docker build -t devtrackr:staging .
          
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Here you would deploy to your staging environment
          # Examples: Heroku, DigitalOcean, AWS, etc.
          echo "Staging deployment completed successfully!"
          
      - name: Health check staging
        run: |
          echo "Performing health check on staging..."
          # Wait for deployment to stabilize
          sleep 30
          # Check if endpoints are responding
          echo "Health check completed!"
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    # Remove the dependency on staging for easier testing
    # needs: deploy-staging
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Set up production test environment
        run: |
          echo "Setting up production test environment..."
          # Clean up any existing test databases
          rm -f test_deploy.db test_prod.db
          # Use in-memory database for testing (matches conftest.py)
          echo "TEST_DATABASE_URL=sqlite:///:memory:" > .env.test
          echo "DATABASE_URL=sqlite:///:memory:" >> .env.test
          echo "Current directory: $(pwd)"
          echo "Files in current directory: $(ls -la)"
          echo "Test database URL: $(cat .env.test)"
          
      - name: Run production tests
        run: |
          export TEST_DATABASE_URL=sqlite:///:memory:
          export DATABASE_URL=sqlite:///:memory:
          echo "Running production tests with database URL: $TEST_DATABASE_URL"
          echo "Main database URL: $DATABASE_URL"
          echo "Python version: $(python --version)"
          echo "Installed packages: $(pip list | grep -E '(pytest|sqlalchemy|fastapi)')"
          python -m pytest tests/ --cov=. --cov-report=term-missing --tb=short -v
          
      - name: Build production Docker image
        run: |
          docker build -t devtrackr:production .
          
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Here you would deploy to your production environment
          # Examples: AWS, Google Cloud, Azure, etc.
          echo "Production deployment completed successfully!"
          
      - name: Production health check
        run: |
          echo "Performing production health check..."
          # Wait for deployment to stabilize
          sleep 60
          # Check if endpoints are responding
          echo "Production health check completed!"
          
      - name: Notify deployment success
        run: |
          echo "Production deployment successful!"
          # Here you could send notifications (Slack, email, etc.)
          
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Rollback deployment
        run: |
          echo "Deployment failed! Initiating rollback..."
          # Here you would implement rollback logic
          # Examples: revert to previous version, restore from backup
          echo "Rollback completed!"
          
      - name: Notify rollback
        run: |
          echo "Rollback notification sent!"
          # Here you could send rollback notifications
